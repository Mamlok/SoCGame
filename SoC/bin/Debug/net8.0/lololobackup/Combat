using SoC.Entities.Model;
using SoC.Game.Interfaces;
using SoC.Utilities.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SoC.Game
{
    public class CombatService : ICombatService
    {
        private readonly IMessageHandler messageHandler;

        public CombatService(IMessageHandler messageHandler)
        {
            this.messageHandler = messageHandler;
        }
        public void RunCombat(ref Character character, List<Monster> monsters)
        {
            var monsterDescriptions = "You face off against :";
            foreach (var monster in monsters)
            {
                monsterDescriptions += $"{monster.MonsterType} ";
            }
            messageHandler.Write(monsterDescriptions);

            var dice = new Dice();
            var d20 = new List<Die> { Die.D20 };
            var charDamageDie = new List<Die> { (Die)character.Attack.BaseDie };

            messageHandler.Write("Hit a Key to roll for initiative!");

            var charInitiative = dice.RollDice(new List<Die> { Die.D20});
            var monsterInitiative = dice.RollDice(new List<Die> { Die.D20 });

            messageHandler.WriteRead($"You rolled a {charInitiative} and the monster/s rolled {monsterInitiative}");

            while (charInitiative == monsterInitiative)
            {
                messageHandler.Write("That is a tie lets roll again!");

                charInitiative = dice.RollDice(d20);
                monsterInitiative = dice.RollDice(d20);

                messageHandler.WriteRead($"You rolled a {charInitiative} and the monster/s rolled {monsterInitiative}");
            }

            bool monstersAreAlive = true;

            bool characterTurn = charInitiative > monsterInitiative;

           while (character.IsAlive && monstersAreAlive)
           {
              if (characterTurn)
              {
                    
              
                messageHandler.WriteRead($"Hit a key to attack the {monsters[0].MonsterType}!");
                var attackToHitMonster = dice.RollDice(d20);
                messageHandler.WriteRead($"You rolled a {attackToHitMonster} to hit the {monsters[0].ArmorClass}!");

                if (attackToHitMonster >= monsters[0].ArmorClass)
                {
                    var damage = dice.RollDice(charDamageDie);
                    messageHandler.WriteRead($"You hit the {monsters[0].MonsterType} for {damage} damage!");

                    monsters[0].HitPoints -= damage;
                    if (monsters[0].HitPoints < 1)
                    {
                        messageHandler.Write($"The {monsters[0].MonsterType} is dead!");

                        if (monsters[0].Gold > 0)
                        {
                            character.Gold += monsters[0].Gold;
                            messageHandler.Write($"You found {monsters[0].Gold} gold on the {monsters[0].MonsterType}!");
                        }

                        if (monsters[0].Inventory.Count > 0)
                        {
                            messageHandler.Write($"You found the following items on the {monsters[0].MonsterType}:");
                            foreach (var item in monsters[0].Inventory)
                            {
                                messageHandler.Write(item.Description);
                            }
                            character.Inventory.AddRange(monsters[0].Inventory);
                        }

                        monsters.RemoveAt(0);
                        if (monsters.Count < 1)
                        {
                            monstersAreAlive = false;
                        }

                    }
                }
                else
                {
                    messageHandler.WriteRead($"You missed the {monsters[0].MonsterType}!");
                }

                characterTurn = false;
              }
              else
              {
                    messageHandler.WriteRead($"The {monsters[0].MonsterType} attacks you!");
                    var attackToHitCharacter = dice.RollDice(d20);
                    messageHandler.WriteRead($"The {monsters[0].MonsterType} rolled a {attackToHitCharacter} and you ArmorClass is {character.ArmorClass}!");

                    if (attackToHitCharacter >= character.ArmorClass)
                    {
                        messageHandler.WriteRead($"The {monsters[0].MonsterType} hit you!");
                        var damage = dice.RollDice(new List<Die> { (Die)monsters[0].Attack.BaseDie });
                        messageHandler.WriteRead($"The {monsters[0].MonsterType} hit you for {damage} damage!");

                        character.HitPoints -= damage;
                        if (character.HitPoints < 1)
                        {
                            messageHandler.Write($"You are dead! at the hands of a vicious {monsters[0].MonsterType}");
                            character.CauseOfDeath = $"Killed by a {monsters[0].MonsterType}";
                            character.IsAlive = false;
                        }
                    }
                    else
                    {
                        messageHandler.WriteRead($"The {monsters[0].MonsterType} missed you!");
                    }

                    characterTurn = true;

                }
           }    
        }

    }
}
